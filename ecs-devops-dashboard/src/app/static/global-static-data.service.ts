import {Injectable} from "@angular/core";

import {INSTANCE_ATTR, INSTANCES} from './data/DescribeInstances'
import {REGIONS} from "./data/DescribeRegions";

import {map, Observable, timer} from "rxjs";
import {HttpErrorResponse, HttpResponse} from "@angular/common/http";
import {DISKS} from "./data/DescribeDisks";
import {IMAGES} from "./data/DescribeImages";
import {FULL_STATUS} from "./data/DescribeInstanceFullStatus";
import {EVENTS} from "./data/DescribeInstanceHistoryEvents";
import {CREATE_REPORT_RESULT, DESCRIBE_DIAGNOSE_REPORT, DESCRIBE_DIAGNOSE_REPORT_ATTR} from "./data/DiagnoseReport";
import {SystemEventHistograms} from "./data/DescribeSystemEventHistogram";
import {METRIC_SETS_COMMON, METRIC_SETS_USER} from "./data/DescribeDiagnosticMetricSets";
import {METRIC_DATA} from "./data/DescribeDiagnosticMetrics";
import {INSTANCE_MAINTENANCE_ATTR_DATA} from "./data/DescribeInstanceMaintenanceAttributes";
import {
  DEFAULT_EXECUTION_DATA,
  DEFAULT_TASK_EXECUTION_DATA,
  SUB_TASK_LIST,
  SUB_TASK_LIST_EXECUTIONS_DATA,
  TASK_LIST_DATA
} from "./data/ListExecutions.js";
import {MONITOR_DATA} from "./data/DescribeInstanceMonitorData";

@Injectable({
  providedIn: 'root'
})
export class GlobalStaticDataService {

  public forward(params: {
    action: string | null,
    params?: any
  }): Observable<HttpResponse<any>> {

    switch (params.action) {
      case 'DescribeRegions':
        return this.describeRegions(params.params)
      case 'DescribeInstances':
        return this.describeInstances(params.params)
      case 'DescribeDisks':
        return this.describeDisks(params.params)
      case 'DescribeImages':
        return this.describeImages(params.params)
      case 'DescribeInstanceHistoryEvents':
        return this.describeInstanceHistoryEvents(params.params)
      case 'DescribeInstancesFullStatus':
        return this.describeInstancesFullStatus(params.params)
      case 'DescribeInstanceAttribute':
        return this.describeInstanceAttribute(params.params)
      case 'CreateDiagnosticReport':
        return this.createDiagnosticReport(params.params)
      case 'DescribeDiagnosticReports':
        return this.describeDiagnosticReports(params.params)
      case 'DescribeDiagnosticReportAttributes':
        return this.describeDiagnosticReportAttributes(params.params)
      case 'DescribeSystemEventHistogram':
        return this.describeSystemEventHistogram(params.params)
      case 'CreateDiagnosticMetricSet':
        return this.createDiagnosticMetricSet(params.params)
      case 'ModifyDiagnosticMetricSet':
        return this.modifyDiagnosticMetricSet(params.params)
      case 'DeleteDiagnosticMetricSets':
        return this.deleteDiagnosticMetricSets(params.params)
      case 'DescribeDiagnosticMetricSets':
        return this.describeDiagnosticMetricSets(params.params)
      case 'DescribeDiagnosticMetrics':
        return this.describeDiagnosticMetrics(params.params)
      case 'DescribeInstanceMaintenanceAttributes':
        return this.describeInstanceMaintenanceAttributes(params.params)
      case 'ModifyInstanceMaintenanceAttributes':
        return this.modifyInstanceMaintenanceAttributes(params.params)
      case 'AcceptInquiredSystemEvent':
        return this.acceptInquiredSystemEvent(params.params)
      case 'StartExecution':
        return this.startExecution(params.params)
      case 'GetInstanceScreenshot':
        return this.getInstanceScreenshot(params.params)
      case 'GetInstanceConsoleOutput':
        return this.getInstanceConsoleOutput(params.params)
      case 'DescribeCloudAssistantStatus':
        return this.describeCloudAssistantStatus(params.params)
      case 'ListExecutions':
        return this.listExecutions(params.params)
      case 'ListTaskExecutions':
        return this.listTaskExecutions(params.params)
      case 'UpdateExecution':
      case 'CancelExecution':
      case 'DeleteExecutions':
      case 'TriggerExecution':
        return this.newSuccessResponse({
          RequestId: ""
        })
      case 'GenerateExecutionPolicy':
        return this.generateExecutionPolicy(params.params)
      case 'RunCommand':
        return this.runCommand(params.params)
      case 'StopInstance':
        return this.stopInstance(params.params)
      case 'DescribeInstanceMonitorData':
        return this.describeInstanceMonitorData(params.params)
      default:
        // 默认 api Not Found
        return timer(200).pipe(
          map(data => {
            throw new HttpErrorResponse({
              error: {},
              status: 404,
              statusText: 'Api Static Data Not Exist',
            })
          })
        )
    }

  }

  private describeInstanceMonitorData(params: any){
    return this.newSuccessResponse(MONITOR_DATA)
  }

  private runCommand(params: any) {
    return this.newSuccessResponse({
      RequestId: "",
      CommandId: "",
      ExecutionId: ""
    })
  }

  private stopInstance(params: any) {
    return this.newSuccessResponse({
      RequestId: ""
    })
  }

  private generateExecutionPolicy(params: any) {
    return this.newSuccessResponse({
      "Policy": {
        "Version": "1",
        "Statement": [
          {
            "Action": [
              "ecs:CreateDiagnosticReport",
              "ecs:DescribeDiagnosticReportAttributes",
              "ecs:DescribeInstances"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      },
      "RequestId": "3E4B6395-6983-50A0-94AE-82738F18CF5A",
      "MissingPolicy": []
    })
  }

  private listTaskExecutions(params: any) {
    const executionId = params.ExecutionId;
    let data = SUB_TASK_LIST_EXECUTIONS_DATA.TaskExecutions.filter((item: any) => item.ExecutionId === executionId)
    if (data && data.length === 0 && executionId.indexOf(".") > -1) {
      const item = {...DEFAULT_TASK_EXECUTION_DATA}
      item.ExecutionId = executionId
      item.TaskExecutionId = executionId + ".t0001"
      data = [item]
    }
    return this.newSuccessResponse({
      "RequestId": "2E9CA826-71FD-53EF-A035-E21D22FB5914",
      "MaxResults": 50,
      "TaskExecutions": data
    })
  }

  private listExecutions(params: any) {
    const executionId = params.ExecutionId;
    if (executionId) {
      let data = TASK_LIST_DATA.Executions.filter((item: any) => item.ExecutionId === executionId)
      if (data && data.length === 0 && executionId.indexOf(".") > -1) {
        const item = {...DEFAULT_EXECUTION_DATA}
        item.ExecutionId = executionId
        item.ParentExecutionId = executionId.split(".")[0]
        data = [item]
      }
      return this.newSuccessResponse({
        "RequestId": "2E9CA826-71FD-53EF-A035-E21D22FB5914",
        "MaxResults": 50,
        "Executions": data
      })
    }
    const parentExecutionId = params.ParentExecutionId;
    if (parentExecutionId) {
      const data = SUB_TASK_LIST.Executions.filter((item: any) => item.ParentExecutionId === parentExecutionId)
      return this.newSuccessResponse({
        "RequestId": "2E9CA826-71FD-53EF-A035-E21D22FB5914",
        "MaxResults": 50,
        "Executions": data
      })
    }
    const data = TASK_LIST_DATA.Executions.filter((item: any) => item.ParentExecutionId === undefined)
    return this.newSuccessResponse({
      "RequestId": "2E9CA826-71FD-53EF-A035-E21D22FB5914",
      "MaxResults": 50,
      "Executions": data
    })
  }

  private startExecution(params: any) {
    const data = TASK_LIST_DATA.Executions.filter((item: any) => item.ParentExecutionId === undefined && item.TemplateName === params.TemplateName)
    return this.newSuccessResponse({
      "Execution": data && data.length > 0 ? data[0] : {},
      "RequestId": "DD4AF7CE-344E-5F7E-9F75-78CE20F7FD3D"
    })
  }

  private describeCloudAssistantStatus(params: any) {
    return this.newSuccessResponse({
      "TotalCount": 0,
      "PageSize": 0,
      "RequestId": "8192B62B-D39B-53CE-B055-3A22C7A7F12B",
      "NextToken": "",
      "PageNumber": 0,
      "InstanceCloudAssistantStatusSet": {
        "InstanceCloudAssistantStatus": []
      }
    })
  }

  private getInstanceScreenshot(params: any) {
    return this.newSuccessResponse({
      "RequestId": "AA4F5D27-606F-5336-B3B8-ABF987C2E14C",
      "InstanceId": "i-bp1cy7dqclkmua5gbqo4",
      "Screenshot": "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"
    })
  }

  private getInstanceConsoleOutput(params: any) {
    return this.newSuccessResponse({
      "ConsoleOutput": "",
      "RequestId": "00565DF8-0798-5755-AA8E-045A36EF8827",
      "LastUpdateTime": "2024-08-26 10:14:18",
      "InstanceId": "i-bp1cy7dqclkmua5gbqo4"
    })
  }

  private acceptInquiredSystemEvent(params: any) {
    if (EVENTS[params['RegionId']]) {
      const data = EVENTS[params['RegionId']]['InstanceSystemEventSet']['InstanceSystemEventType'];
      for (let i = 0; i < data.length; i++) {
        const item = data[i];
        if (item.EventId === params.EventId) {
          item.EventCycleStatus = {
            "Code": 4,
            "Name": "Scheduled"
          }
        }
      }
    }

    return this.newSuccessResponse({
      RequestId: "",
    })
  }

  private describeInstanceMaintenanceAttributes(params: any) {
    const instanceIds: string[] = []
    Object.keys(params).forEach(key => {
      if (key.startsWith('InstanceId.')) {
        instanceIds.push(params[key])
      }
    })
    const res = {...INSTANCE_MAINTENANCE_ATTR_DATA[params.RegionId]}
    if (instanceIds.length > 0) {
      res['MaintenanceAttributes']['MaintenanceAttribute'] = res['MaintenanceAttributes']['MaintenanceAttribute'].filter((item: any) => {
        return instanceIds.includes(item.InstanceId)
      })
    }

    return this.newSuccessResponse(res)
  }

  private modifyInstanceMaintenanceAttributes(params: any) {
    const instanceIds: string[] = []
    Object.keys(params).forEach(key => {
      if (key.startsWith('InstanceId.')) {
        instanceIds.push(params[key])
      }
    })
    const data = INSTANCE_MAINTENANCE_ATTR_DATA[params.RegionId]['MaintenanceAttributes']['MaintenanceAttribute'];
    for (let i = 0; i < data.length; i++) {
      const item = data[i];
      if (instanceIds.includes(item.InstanceId)) {
        item.NotifyOnMaintenance = params.NotifyOnMaintenance;
        item.ActionOnMaintenance.Value = params.ActionOnMaintenance;
        if (params['MaintenanceWindow.1.StartTime'] && params['MaintenanceWindow.1.EndTime']) {
          item.MaintenanceWindows = {
            MaintenanceWindow: [
              {
                StartTime: params['MaintenanceWindow.1.StartTime'],
                EndTime: params['MaintenanceWindow.1.EndTime']
              }
            ]
          }
        } else {
          delete item.MaintenanceWindows
        }
      }
    }
    return this.newSuccessResponse({
      RequestId: "",
    })
  }

  private deleteDiagnosticMetricSets(params?: any) {
    const data: any[] = []
    Object.keys(params).forEach(key => {
      if (key.startsWith('MetricSetIds.')) {
        data.push(params[key])
      }
    })

    METRIC_SETS_USER.MetricSets = METRIC_SETS_USER.MetricSets.filter((item: any) => {
      return data.indexOf(item.MetricSetId) === -1
    })
    return this.newSuccessResponse("");
  }

  private modifyDiagnosticMetricSet(params?: any) {
    METRIC_SETS_USER.MetricSets = METRIC_SETS_USER.MetricSets.filter((item: any) => {
      return item.MetricSetId !== params.MetricSetId
    })

    const data: any = {
      MetricIds: [],
      Type: "User",
      MetricSetId: params.MetricSetId
    }
    Object.keys(params).forEach(key => {
      if (key.startsWith('MetricIds.')) {
        data.MetricIds.push(params[key])
      } else {
        data[key] = params[key];
      }
    })

    METRIC_SETS_USER.MetricSets.push(data)
    return this.newSuccessResponse("");
  }

  private createDiagnosticMetricSet(params?: any) {
    const data: any = {
      MetricIds: [],
      Type: "User",
      MetricSetId: "dms-" + new Date().getTime()
    }
    Object.keys(params).forEach(key => {
      if (key.startsWith('MetricIds.')) {
        data.MetricIds.push(params[key])
      } else {
        data[key] = params[key];
      }
    })

    METRIC_SETS_USER.MetricSets.push(data)
    const res = {
      RequestId: "",
      MetricSetId: data.MetricSetId
    }
    return this.newSuccessResponse(res);
  }

  private describeDiagnosticMetrics(params?: any) {
    return this.newSuccessResponse(METRIC_DATA);
  }

  private describeDiagnosticMetricSets(params?: any) {
    if (params['Type'] === 'User') {
      return this.newSuccessResponse(METRIC_SETS_USER);
    }
    return this.newSuccessResponse(METRIC_SETS_COMMON);
  }

  private describeSystemEventHistogram(params?: any) {
    const regionId = params['RegionId'];
    return this.newSuccessResponse(SystemEventHistograms[regionId] || SystemEventHistograms.default);
  }

  private describeInstanceHistoryEvents(params?: any) {
    const regionId = params['RegionId'];
    return this.newSuccessResponse(EVENTS[regionId] || EVENTS.default)
  }

  private describeInstancesFullStatus(params?: any) {
    const regionId = params['RegionId'];
    return this.newSuccessResponse(FULL_STATUS[regionId] || FULL_STATUS.default)
  }

  private describeImages(params?: any) {
    const regionId = params['RegionId'];
    return this.newSuccessResponse(IMAGES[regionId] || IMAGES.default)
  }

  private describeDisks(params?: any) {
    const regionId = params['RegionId'];
    return this.newSuccessResponse(DISKS[regionId] || DISKS.default)
  }

  private describeInstances(params?: any) {
    const regionId = params['RegionId'];
    return this.newSuccessResponse(INSTANCES[regionId] || INSTANCES.default)
  }

  private describeRegions(params: { action: string | null; regionId?: string; params?: any }) {
    return this.newSuccessResponse(REGIONS);
  }


  private describeInstanceAttribute(params: any) {
    const res = INSTANCE_ATTR[params.InstanceId]
    if (res) {
      return this.newSuccessResponse(res)
    }
    return this.newFailResponse({
      Code: "InvalidInstanceId.NotFound",
      Message: "当前Mock数据环境无法使用该实例ID，请配置AccessKey后重试.",
    });
  }

  private createDiagnosticReport(params: any) {
    return this.newSuccessResponse(CREATE_REPORT_RESULT);
  }

  private describeDiagnosticReports(params: any) {
    return this.newSuccessResponse(DESCRIBE_DIAGNOSE_REPORT[params['ResourceId'] || "i-bp19trejji1vzvjr1qq1"]);
  }

  private describeDiagnosticReportAttributes(params: any) {
    return this.newSuccessResponse(DESCRIBE_DIAGNOSE_REPORT_ATTR[params['ReportId']]);
  }

  private newSuccessResponse(body: any) {
    return timer(200).pipe(
      map(() => {
        return new HttpResponse({
          body: body
        })
      })
    );
  }

  private newFailResponse(error: any) {
    return timer(200).pipe(
      map(() => {
        throw new HttpErrorResponse({
          error: error,
          status: 400,
          statusText: 'request error',
        })
      })
    );
  }
}
